{
  "timestamp": "2025-05-20T14:40:04.947141",
  "input_file": "yunmusic.txt",
  "song_count": 439,
  "results": {
    "text_normalization": {
      "total_samples": 956,
      "avg_time": 0.0020328600536330473,
      "min_time": 0.0,
      "max_time": 0.007003068923950195,
      "median_time": 0.00200045108795166,
      "memory_usage_mb": 0.00201416015625,
      "profile_result": "         2 function calls in 0.000 seconds\n\n   Ordered by: cumulative time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    0.000    0.000 d:\\ai\\music_move\\spotify_playlist_importer\\spotify_playlist_importer\\utils\\text_normalizer.py:312(normalize_text)\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\n\n"
    },
    "string_matching": {
      "total_samples": 100,
      "avg_time": 9.961128234863282e-06,
      "min_time": 0.0,
      "max_time": 0.0009961128234863281,
      "median_time": 0.0,
      "memory_usage_mb": 0.00244903564453125,
      "candidate_count_times": {
        "5": 0.0,
        "10": 0.0,
        "20": 0.0,
        "50": 4.991292953491211e-05
      },
      "profile_result": "         114 function calls in 0.000 seconds\n\n   Ordered by: cumulative time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    0.000    0.000 d:\\ai\\music_move\\spotify_playlist_importer\\spotify_playlist_importer\\utils\\string_matcher.py:202(match)\n       10    0.000    0.000    0.000    0.000 d:\\ai\\music_move\\spotify_playlist_importer\\spotify_playlist_importer\\utils\\string_matcher.py:158(_quick_check)\n       10    0.000    0.000    0.000    0.000 d:\\ai\\music_move\\spotify_playlist_importer\\spotify_playlist_importer\\utils\\string_matcher.py:172(<listcomp>)\n       31    0.000    0.000    0.000    0.000 {built-in method builtins.len}\n       20    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}\n       30    0.000    0.000    0.000    0.000 {method 'get' of 'dict' objects}\n       10    0.000    0.000    0.000    0.000 {built-in method builtins.abs}\n        1    0.000    0.000    0.000    0.000 {method 'sort' of 'list' objects}\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\n\n"
    },
    "enhanced_matching": {
      "total_samples": 100,
      "avg_time": 0.0024537920951843263,
      "min_time": 0.001912832260131836,
      "max_time": 0.0050237178802490234,
      "median_time": 0.0020170211791992188,
      "memory_usage_mb": 0.7819271087646484,
      "threshold_times": {
        "50_60": 0.0022938370704650877,
        "60_70": 0.00223311185836792,
        "70_80": 0.001949942111968994,
        "80_90": 0.002199530601501465
      },
      "profile_result": "         17855 function calls (17852 primitive calls) in 0.007 seconds\n\n   Ordered by: cumulative time\n   List reduced from 56 to 20 due to restriction <20>\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.000    0.000    0.007    0.007 d:\\ai\\music_move\\spotify_playlist_importer\\spotify_playlist_importer\\utils\\enhanced_matcher.py:263(get_enhanced_match)\n        1    0.000    0.000    0.007    0.007 d:\\ai\\music_move\\spotify_playlist_importer\\spotify_playlist_importer\\utils\\enhanced_matcher.py:24(__init__)\n        1    0.000    0.000    0.007    0.007 d:\\ai\\music_move\\spotify_playlist_importer\\spotify_playlist_importer\\utils\\bracket_matcher.py:22(__init__)\n        1    0.000    0.000    0.007    0.007 d:\\ai\\music_move\\spotify_playlist_importer\\spotify_playlist_importer\\utils\\text_normalizer.py:70(__init__)\n        1    0.000    0.000    0.007    0.007 D:\\python\\Lib\\site-packages\\opencc\\opencc.py:36(__init__)\n        1    0.000    0.000    0.007    0.007 D:\\python\\Lib\\site-packages\\opencc\\opencc.py:95(_init_dict)\n      2/1    0.004    0.002    0.007    0.007 D:\\python\\Lib\\site-packages\\opencc\\opencc.py:122(_add_dictionaries)\n     4390    0.001    0.000    0.001    0.000 {method 'split' of 'str' objects}\n     8805    0.001    0.000    0.001    0.000 {built-in method builtins.len}\n     4390    0.001    0.000    0.001    0.000 {method 'strip' of 'str' objects}\n        8    0.000    0.000    0.000    0.000 <frozen codecs>:319(decode)\n        3    0.000    0.000    0.000    0.000 {built-in method io.open}\n        8    0.000    0.000    0.000    0.000 {built-in method _codecs.utf_8_decode}\n        3    0.000    0.000    0.000    0.000 {method '__exit__' of '_io._IOBase' objects}\n       21    0.000    0.000    0.000    0.000 D:\\python\\Lib\\re\\__init__.py:225(compile)\n        1    0.000    0.000    0.000    0.000 D:\\python\\Lib\\json\\__init__.py:274(load)\n        1    0.000    0.000    0.000    0.000 d:\\ai\\music_move\\spotify_playlist_importer\\spotify_playlist_importer\\utils\\text_normalizer.py:84(<dictcomp>)\n      3/1    0.000    0.000    0.000    0.000 D:\\python\\Lib\\site-packages\\opencc\\opencc.py:148(_add_dict_chain)\n       21    0.000    0.000    0.000    0.000 D:\\python\\Lib\\re\\__init__.py:272(_compile)\n        3    0.000    0.000    0.000    0.000 <frozen ntpath>:249(dirname)\n\n\n"
    },
    "batch_scaling": {
      "batch_times": {
        "10": {
          "total_time": 0.022005081176757812,
          "avg_time_per_song": 0.0022005081176757813
        },
        "50": {
          "total_time": 0.11008095741271973,
          "avg_time_per_song": 0.0022016191482543946
        },
        "100": {
          "total_time": 0.21443581581115723,
          "avg_time_per_song": 0.0021443581581115723
        },
        "200": {
          "total_time": 0.4772632122039795,
          "avg_time_per_song": 0.0023863160610198973
        },
        "400": {
          "total_time": 0.8764171600341797,
          "avg_time_per_song": 0.002191042900085449
        }
      },
      "scaling_factors": {
        "50": {
          "ideal_factor": 5.0,
          "actual_factor": 5.0025244864349485,
          "efficiency": 0.9994953575056366
        },
        "100": {
          "ideal_factor": 10.0,
          "actual_factor": 9.744831845367079,
          "efficiency": 1.0261849725764365
        },
        "200": {
          "ideal_factor": 20.0,
          "actual_factor": 21.688773077923205,
          "efficiency": 0.922136071420186
        },
        "400": {
          "ideal_factor": 40.0,
          "actual_factor": 39.82794487301725,
          "efficiency": 1.0043199599560386
        }
      }
    },
    "end_to_end": {
      "total_songs": 50,
      "total_duration": 7.596251726150513,
      "avg_time_per_song": 0.15192503452301026,
      "song_times": {
        "avg": 0.15192503452301026,
        "min": 0.11396455764770508,
        "max": 0.2065591812133789,
        "median": 0.142303466796875
      },
      "match_rate": 1.0
    }
  },
  "optimization_suggestions": [
    "考虑对文本归一化函数进行缓存，避免对相同输入重复处理",
    "候选数量显著影响匹配性能，建议限制初始候选数量，或实施早期剪枝策略",
    "考虑使用并行处理同时处理多首歌曲，特别是在批量导入场景",
    "对于常见的艺术家和歌曲名称组合，可以实现结果缓存以减少计算",
    "考虑使用更精细的日志级别控制，在生产环境中减少不必要的日志输出",
    "评估是否可以使用更高效的字符串相似度算法，如使用编辑距离的近似算法",
    "在用户界面中显示进度指示器，改善用户体验"
  ]
}